name: Deploy

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  #----------------------------BUILD----------------------------------
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: '5.0.100'
      - name: Install dependencies
        run: dotnet restore MiniTwitApi
      - name: Build
        run: dotnet build MiniTwitApi --no-restore
  #----------------------------TEST-------------------------------------
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
    # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: '5.0.100'
      - name: Install dependencies
        run: dotnet restore MiniTwitApi
      - name: Test
        run: dotnet test MiniTwitApi.Tests/MiniTwitApi.Tests.csproj
  #----------------------------SONNARSCANNER----------------------------
  sonarscanner_code_check:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
    # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: '5.0.100'
      - name: Install dependencies
        run: dotnet restore MiniTwitApi
      - name: Install SonnarScanner
        run: dotnet tool install --global dotnet-sonarscanner
      - name: Start SonnarScanner
        env: # Or as an environment variable
          SONAR_LOGIN: ${{ secrets.SONAR_LOGIN }}
          SONAR_DIRECTORY: ${{ secrets.SONAR_DIRECTORY }}
        run: dotnet sonarscanner begin /k:jokk-itu_PythonKindergarten /d:sonar.login="$SONAR_LOGIN" /d:sonar.host.url="https://sonarcloud.io/" /o:jokk-itu /d:sonar.cs.opencover.reportsPaths=MiniTwitApi.Tests/coverage.opencover.xml
      - name: Build and test MiniTwit to generate report
        run: |
          dotnet build MiniTwitApi
          dotnet test MiniTwitApi.Tests/MiniTwitApi.Tests.csproj --logger "junit;LogFilePath=testResults/results.xml" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
      - name: End SonnarScanner
        env: # Or as an environment variable
            SONAR_LOGIN: ${{ secrets.SONAR_LOGIN }}
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="$SONAR_LOGIN"
  #----------------------------DOCKERBUILD------------------------------
  docker_build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
    # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: '5.0.100'
      - name: Install dependencies
        run: dotnet restore MiniTwitApi
      - name: Login to Docker
        env: # Or as an environment variable
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: | 
          echo "$DOCKER_PASSWORD"
          echo "$DOCKER_USERNAME"
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker build -t $DOCKER_USERNAME/pythonkindergartenimage:latest . -f Dockerfile
          docker push $DOCKER_USERNAME/pythonkindergartenimage:latest
  #----------------------------DEPLOY------------------------------------
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
    # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: '5.0.100'
      - name: Install dependencies
        run: dotnet restore MiniTwitApi
      - name: Deploy
        env: # Or as an environment variable
          MT_USER: ${{ secrets.MT_USER }}
          MT_SERVER: ${{ secrets.MT_SERVER }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p /home/runner/.ssh
          ssh-keyscan $MT_SERVER >> /home/runner/.ssh/known_hosts
          echo "${{ secrets.SSH_PRIVATE }}" > /home/runner/.ssh/github_actions
          chmod 600 /home/runner/.ssh/github_actions
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null   
          ssh-add /home/runner/.ssh/github_actions
          
          ssh -o "StrictHostKeyChecking no" $MT_USER@$MT_SERVER \ "docker pull $DOCKER_USERNAME/pythonkindergartenimage:latest && \ docker service update --image pythonkindergartenimage pythonservice_minitwitimage"
  release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      - run: echo "Needs to be implemented"
