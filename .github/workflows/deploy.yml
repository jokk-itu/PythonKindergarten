name: Deploy

# Controls when the action will run. 
on:
  # Triggers the workflow on push, only for the master branch
  push:
    branches: [ master ]

  workflow_dispatch:

jobs:
  #----------------------------BUILD----------------------------------
  build_and_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: '5.0.100'
      - name: Install dependencies
        run: dotnet restore MiniTwitApi
      - name: Build
        run: dotnet build MiniTwitApi --no-restore
      - name: Test
        run: dotnet test MiniTwitApi.Tests/MiniTwitApi.Tests.csproj
  #----------------------------CodeQL-------------------------------
  CodeQL:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp', 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
  #----------------------------SONNARSCANNER----------------------------
  sonarscanner_code_check:
    needs: [build_and_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: '5.0.100'
      - name: Install dependencies
        run: dotnet restore MiniTwitApi
      - name: Install SonnarScanner
        run: dotnet tool install --global dotnet-sonarscanner
      - name: Start SonnarScanner
        env:
          SONAR_LOGIN: ${{ secrets.SONAR_LOGIN }}
          SONAR_DIRECTORY: ${{ secrets.SONAR_DIRECTORY }}
        run: dotnet sonarscanner begin /k:jokk-itu_PythonKindergarten /d:sonar.login="$SONAR_LOGIN" /d:sonar.host.url="https://sonarcloud.io/" /o:jokk-itu /d:sonar.cs.opencover.reportsPaths=/home/runner/work/PythonKindergarten/PythonKindergarten/MiniTwitApi.Tests/coverage.opencover.xml
      - name: Build and test MiniTwit to generate report
        run: |
          dotnet build MiniTwitApi
          dotnet test MiniTwitApi.Tests/MiniTwitApi.Tests.csproj --logger "junit;LogFilePath=testResults/results.xml" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
      - name: End SonnarScanner
        env:
            SONAR_LOGIN: ${{ secrets.SONAR_LOGIN }}
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="$SONAR_LOGIN"
  #----------------------------DOCKERBUILD------------------------------
  docker_build:
    needs: [build_and_test, CodeQL, sonarscanner_code_check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: '5.0.100'
      - name: Install dependencies
        run: dotnet restore MiniTwitApi
      - name: Login to Docker
        env: # Or as an environment variable
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: | 
          echo "$DOCKER_PASSWORD"
          echo "$DOCKER_USERNAME"
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker build -t $DOCKER_USERNAME/pythonkindergartenimage:latest . -f Dockerfile
          docker push $DOCKER_USERNAME/pythonkindergartenimage:latest
  #----------------------------DEPLOY------------------------------------
  deploy:
    needs: [build_and_test, CodeQL, sonarscanner_code_check, docker_build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: '5.0.100'
      - name: Install dependencies
        run: dotnet restore MiniTwitApi
      - name: Deploy
        env: # Or as an environment variable
          MT_USER: ${{ secrets.MT_USER }}
          MT_SERVER: ${{ secrets.MT_SERVER }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p /home/runner/.ssh
          ssh-keyscan $MT_SERVER >> /home/runner/.ssh/known_hosts
          echo "${{ secrets.SSH_PRIVATE }}" > /home/runner/.ssh/github_actions
          chmod 600 /home/runner/.ssh/github_actions
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null   
          ssh-add /home/runner/.ssh/github_actions
          
          ssh -o "StrictHostKeyChecking no" $MT_USER@$MT_SERVER "docker pull $DOCKER_USERNAME/pythonkindergartenimage:latest && docker service update --image $DOCKER_USERNAME/pythonkindergartenimage:latest pythonservice_minitwitimage"
  #----------------------------RELEASE------------------------------------
  build_latex_and_release:
    needs: [build_and_test, CodeQL, sonarscanner_code_check, docker_build, deploy]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Set up Git repository
      uses: actions/checkout@v2
    - name: Compile LaTeX document
      uses: xu-cheng/latex-action@v2
      with:
        root_file: main.tex
        working_directory: ./projectreport
        args: "-lualatex -file-line-error -interaction=nonstopmode"
        latexmk_use_lualatex: true
        latexmk_shell_escape: true
    - uses: papeloto/action-zip@v1
      with:
        files: ./projectreport
        dest: report.zip
    - id: release
      uses: rymndhng/release-on-push-action@v0.18.0
      with:
        bump_version_scheme: minor
    - name: Check Output Parameters
      run: |
        echo "Got tag name ${{ steps.release.outputs.tag_name }}"
        echo "Got release version ${{ steps.release.outputs.version }}"
    - uses: AButler/upload-release-assets@v2.0
      with:
        files: './projectreport/main.pdf'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        release-tag: ${{ steps.release.outputs.tag_name }}
    - uses: AButler/upload-release-assets@v2.0
      with:
        files: 'report.zip'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        release-tag: ${{ steps.release.outputs.tag_name }}
  
