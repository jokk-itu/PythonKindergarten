os: linux
dist: bionic
language: csharp
mono: none
dotnet: 5.0
solution: /MiniTwitApi/Server/MiniTwitApi.Server.csproj
services:
- docker
before_install:
- openssl aes-256-cbc -K $encrypted_56635d5d55b3_key -iv $encrypted_56635d5d55b3_iv -in do_ssh_key.enc -out ssh_keys/do_ssh_key -d
- chmod 600 ssh_keys/do_ssh_key
- echo 'echo ${SSH_PASSPHRASE}' > /tmp/askpass && chmod +x /tmp/askpass
- eval "$(ssh-agent -s)"
- DISPLAY=":0.0" SSH_ASKPASS="/tmp/askpass" setsid ssh-add ssh_keys/do_ssh_key </dev/null
install:
- docker --version
- dotnet tool install --global dotnet-sonarscanner
- dotnet restore MiniTwitApi/Server/MiniTwitAPi.Server.csproj
- dotnet restore MiniTwitApi.Tests/MiniTwitApi.Tests.csproj
stages:
- build
- test
##- roslynator_code_check
- sonarscanner_code_check
- docker_build
- deploy
- release
before_script:
  - export PATH="$PATH:$HOME/.dotnet/tools"
before_deploy:
  - git config --local user.name "bjornarjatten"
  - git config --local user.email "bjornjaat@hotmail.com"
  - export TRAVIS_TAG=${TRAVIS_TAG:-$(date +'%Y%m%d%H%M%S')-$(git log --format=%h -1)}
  - git tag $TRAVIS_TAG
jobs:
  include:
  - stage: build
    name: build
    if: branch != master
    install: skip
    script:
      - cd MiniTwitApi
      - dotnet build
  - stage: test
    name: test
    if: branch != master
    install: skip
    script:
      - cd MiniTwitApi.Tests
      - dotnet test
      - cd ..
  #- stage: roslynator_code_check
  #  name: roslynator
  #  if: branch = master
  #  install: skip
  #  script:
  #    - echo "INSTALLING ROSLYNATOR"
  #    - cd MiniTwitAPi
  #    - dotnet tool install --global Roslynator.DotNet.Cli --version 0.1.1
  #    - echo "INSTALLING ANALYZERS"
  #    - dotnet add package Roslynator.Analyzers --version 3.1.0 ./Server
  #    - dotnet add package Roslynator.Analyzers --version 3.1.0 ./Client
  #    - dotnet add package Roslynator.Analyzers --version 3.1.0 ./Shared
  #    - echo "STARTING ROSLYNATOR"
  #    - roslynator analyze MiniTwitApi.sln
  #    - "DONE ANALYZING"
  - stage: sonarscanner_code_check
    name: sonnarscanner
    install: skip
    script:
      - echo "INSTALL SONNARSCANNER "
      - dotnet tool install --global dotnet-sonarscanner
      - echo "START SONNARSCANNER"
      - dotnet sonarscanner begin /k:jokk-itu_PythonKindergarten /d:sonar.login="$SONAR_LOGIN" /d:sonar.host.url="https://sonarcloud.io/" /o:jokk-itu /d:sonar.cs.vscoveragexml.reportsPaths= MiniTwitApi.Tests/testResults/results.xml
      - dotnet build MiniTwitApi
      - dotnet test MiniTwitApi.Tests/MiniTwitApi.Tests.csproj --logger "junit;LogFilePath=testResults/results.xml" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
      - echo "END SONNARSCCANNER"
      - dotnet sonarscanner end /d:sonar.login="$SONAR_LOGIN"
  - stage: docker_build
    name: build and push docker
    if: branch = master
    script:
    - echo "LOGIN"
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
    - echo "BUILD"
    - docker build -t $DOCKER_USERNAME/pythonkindergartenimage:latest . -f Dockerfile
    - echo "PUSH"
    - docker push $DOCKER_USERNAME/pythonkindergartenimage:latest
  - stage: deploy
    name: deploy new version
    if: branch = master
    install: skip
    script: |
      ssh -o "StrictHostKeyChecking no" ${MT_USER}@${MT_SERVER} \
      "cd /vagrant/production && \
      docker-compose pull && \
      docker-compose up -d && \
      docker pull $DOCKER_USERNAME/pythonkindergartenimage:latest"
  - stage: release
    name: Github
    if: branch = master
    script: echo "Deploying to GitHub releases ..."
    deploy:
      provider: releases
      api_key: $GITHUB_OAUTH_TOKEN
      skip_cleanup: true
