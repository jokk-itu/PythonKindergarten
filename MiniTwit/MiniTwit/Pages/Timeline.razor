@page "/timeline/{timelinetype}" 
@page "/timeline/{timelinetype}/{username}" 
@using System.Data.SQLite;

@*
Timelinetype 1 = public timeline
Timelinetype 2 = user_timeline
Timelinetype 3 = My timeline / timeline
*@

@if(@TimelineType == "public")
{
    <h2>Public Timeline</h2>
}
else if(@TimelineType == "usertimeline")
{
    <h2>@Username's Timeline</h2>
}
else if(@TimelineType == "mytimeline")
{
    <h2>My timeline</h2>
}

@if(CheckIfUserIsLoggedIn()) @*should check if in database*@
{
    @if(@TimelineType == "userTimeline")
    {
        <div class=followstatus>
            @if(@CurrentUserId == @ProfileUserId) @*Should check if user has the same id as the user which has posted the post*@
            {
                <p>This is you!</p>
            }
            else if(false) @*Should check if the user which posted the messaged is followed by the viewing user, must be done via API?*@
            {
                <p>You are currently following this user.</p>
                <a class=unfollow href="{{ url_for('unfollow_user', username=profile_user.username)}}">Unfollow user</a> @*Implement unfollowing user*@
            }
            else
            {
                <p>You are not yet following this user.</p>
                <a class=follow href="{{ url_for('follow_user', username=profile_user.username)}}">Follow user</a> @*Implement following user*@
            }
        </div>
    }else if(@TimelineType == "myTimeline"){
        <div class=twitbox>
            <h3>What's on your mind @*The name of the user which is logged in*@?</h3>
            <form action="@*To API*@" method=post>
                <input type=text name=text size=60>
                <input type=submit value="Share">
            </form>
        </div>
    }
}

  <ul class=messages>
        @* @if(messages != null)
        {
            @foreach (var message in messages)
            {
                <li><img src="{{ message.email|gravatar(size=48) }}">
                <strong><a href="{{ url_for('user_timeline', username=message.username)
                }}">{{ message.username }}</a></strong>
                {{ message.text }}
                <small>&mdash; {{ message.pub_date|datetimeformat }}</small></li>
            }
        }
        else
        {
            <li><em>There's no message so far.</em></li>
        }*@
  </ul>

@code{
    [Parameter]    
    public string TimelineType {get;set;}
    [Parameter]
    public string Username { get; set; }

    public int CurrentUserId = 0;
    public int ProfileUserId = 0;
    protected override void OnInitialized()
    {
        CurrentUserId = 1; @* The user which is currently logged in*@
        ProfileUserId = 2; @* If a user timeline is shown, this profile user id should get the userid of the username from the API *@
    }
    public bool CheckIfUserIsLoggedIn()
    {
        if(CurrentUserId == 1) @* CheckIfUserIsLoggedIn*@
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

@* @code{
    string username;
    protected override async Task OnInitializedAsync()
    {
        @*SQL QUERY* 
        @*OR make a class which retrieves the data and use it here*
        @*https://zetcode.com/csharp/sqlite/*
        var connection_string = "URI=../tmp/minitwit.db";
        using (var connection = new SQLiteConnection(connection_string))
        {
            @*RAW query for retrieval
            var statement = "SQL QUERY";
            connection.Open();
            using (var reader =  await new SQLiteCommand(statement, new SQLiteConnection(connection_string)).ExecuteReaderAsync())
            {
                while(reader.Read()) 
                {
                    @*Use the data from reader object*
                }
            };
            @*PREPARED query for retrieval*
            using (var command = new SQLiteCommand(connection_string))
            {
                command.CommandText = "Prepared SQL query"; @*Prepared values are written like so: @nameofvalue*
                command.Parameters.AddWithValue("name of prepared value", "actual value");
                @*Repeat as many times as there are prepared values*
                command.Prepare();
                using (var reader_p = await command.ExecuteReaderAsync())
                {
                    while (reader_p.Read())
                    {
                        @*Use the data from reader_p object*
                    }
                }
            }
            
            @*RAW insertion query*
            using (var command = new SQLiteCommand())
            {
                command.CommandText = "SQL query for insertion";
                command.ExecuteNonQuery(); @*async?*
            }

            @*PREAPRED insertion query*
            using (var command = new SQLiteCommand())
            {
                command.CommandText = "SQL query for insertion with prepared values";
                command.Parameters.AddWithValue("name of prepared value", "actual value");
                command.Prepare();
                command.ExecuteNonQuery();
            }
            
        };
    }
} *@