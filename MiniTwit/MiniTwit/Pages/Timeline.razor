
@page "/{userid:int}/{username:string}/{timeline:string}"
@model TimelineModel
@{    
}  

<h2>Public/Private Timeline</h2> <!-- Should change between public and private depending on what is requested and check that 
userId above is not an int-->

@if(RouteData.RouteValues.ContainsKey("userid"))
{
    if(@RouteData.RouteValues["timeline"] == "user_timeline")
    {
        <div class=followstatus>
            if(@RouteData.RouteValues["userid"] == "user_id")
            {
                <p>This is you!</p>
            }
            else if(false) //Should check if the user which posted the messaged is followed by the viewing user, must be done via API?
            {
                <p>You are currently following this user.</p>
                <a class=unfollow href="{{ url_for('unfollow_user', username=profile_user.username)}}">Unfollow user</a>.
            }
            else
            {
                <p>You are not yet following this user.</p>
                <a class=follow href="{{ url_for('follow_user', username=profile_user.username)
                }}">Follow user</a>.
            }
        </div>
    }

    

     @if(@RouteData.RouteValues["timeline"] == "timeline"){
         <div class=twitbox>
        <h3>What's on your mind {{ @RouteData.RouteValues["username"] }}?</h3>
        <form action="{{ url_for('add_message') }}" method=post>
            <input type=text name=text size=60>
            <input type=submit value="Share">
        </form>
      </div>
     }
}

  <ul class=messages>
        @if(messages != null)
        {
            @foreach (var message in messages)
            {
                <li><img src="{{ message.email|gravatar(size=48) }}">
                <strong><a href="{{ url_for('user_timeline', username=message.username)
                }}">{{ message.username }}</a></strong>
                {{ message.text }}
                <small>&mdash; {{ message.pub_date|datetimeformat }}</small></li>
            }
        }
        else
        {
            <li><em>There's no message so far.</em></li>
        }
  </ul>

<!--dotnet add package System.Data.SQLite.Core-->
@using System.Data.SQLite;

@code {
    string username;
    protected override async Task OnInitializedAsync()
    {
        <!--SQL QUERY-->
        <!--OR make a class which retrieves the data and use it here-->
        <!---https://zetcode.com/csharp/sqlite/-->
        var connection_string = @"URI=../tmp/minitwit.db";
        using (var connection = new SQLiteConnection(connection_string))
        {
            <!--RAW query for retrieval-->
            var statement = "SQL QUERY";
            connection.Open();
            using (var reader =  await new SQLiteCommand(statement, new SQLiteConnection(connection_string)).ExecuteReaderAsync())
            {
                while(reader.Read()) 
                {
                    <!--Use the data from reader object-->
                }
            };
            <!---PREPARED query for retrieval-->
            using (var command = new SQLiteCommand(connection_string))
            {
                command.CommandText = "Prepared SQL query"; <!--Prepared values are written like so: @nameofvalue-->
                command.Parameters.AddWithValue("name of prepared value", "actual value");
                <!---Repeat as many times as there are prepared values-->
                command.Prepare();
                using (var reader_p = await command.ExecuteReaderAsync())
                {
                    while (reader_p.Read())
                    {
                        <!--Use the data from reader_p object-->
                    }
                }
            }
            
            <!---RAW insertion query-->
            using (var command = new SQLiteCommand())
            {
                command.CommandText = "SQL query for insertion";
                command.ExecuteNonQuery(); <!--async?-->
            }

            <!--PREAPRED insertion query-->
            using (var command = new SQLiteCommand())
            {
                command.CommandText = "SQL query for insertion with prepared values";
                command.Parameters.AddWithValue("name of prepared value", "actual value");
                command.Prepare();
                command.ExecuteNonQuery();
            }
            
        };
    }
}