@using MiniTwitApi.Shared.Models
@using MiniTwitApi.Shared.Models.UserModels
@using System.Globalization
@using System.Text
@using MiniTwitApi.Client.ViewModels
@using MiniTwitApi.Client.ViewModels.Abstract
@using MiniTwitApi.Shared
@using MiniTwitChatClient
@using MiniTwitChatClient.Abstractions
@using MiniTwitChatClient.Misc
@using MiniTwitChatClient.Models

@page "/chat/{SenderUsername}/{TargetUsername}"

@inject IChatViewModel ChatViewModel; 
@inject IJSRuntime JSRuntime;
@inject IMiniChatClient ChatClient;

<Error ViewModel="@ChatViewModel"/>

    <div class="chatInfo">
        <div class="backToUserArea">
            <a href="/timeline/user_timeline/@TargetUsername">Go back</a> @* Refer to target user page*@
        </div>
        <div class="userChatNameArea">
            <p>@TargetUsername</p>
        </div>
    </div>

    <div class="chatClient">
        <div class="chatArea">
            <div class="innerChatArea">
                @foreach (var message in _messages)
                {
                    <div>
                        <div>@message.Content</div>
                        <div>@message.Sender</div>
                    </div>
                }
            </div>
        </div>

        <div class="postMessageArea">
            <span class="customBold">Write a message</span>
            <form @onsubmit="@SendMessage">
                <div class="form-group">
                    <input @bind="Message" type="text" class="form-control" id="Message" placeholder="Write your message here"/>
                </div>
                <button class="btn btn-primary">Send Message</button>
            </form>
        </div>
    </div>

@code
{
    [Parameter] 
    public string SenderUsername { get; set; } 
    [Parameter] 
    public string TargetUsername { get; set; }
    
    [Parameter]
    public string Message { get; set; }

    private string _threadId;

    private ICollection<ChatMessage> _messages = new List<ChatMessage>();

    protected override async Task OnInitializedAsync()
    {
        _threadId = "testing";//Convertions.GetThreadId(new List<string>() {SenderUsername, TargetUsername});
        
        await ChatClient.ConnectAsync();
        await ChatClient.SubscribeAsync(new List<string>() { _threadId });
        ChatClient.ReceivedMessage += message =>
        {
            Console.WriteLine($"Got message");
            
            // Check if we sent this message ourselves
            if (message.Sender != SenderUsername)
            {
                message.Mine = false;
                _messages.Add(message);
                StateHasChanged();   
            }
        };
    }

    private async void SendMessage()
        => await SendMessageAsync();
    
    private async Task SendMessageAsync()
    {
        var message = new ChatMessage()
        {
            Sender = SenderUsername,
            Content = Message,
            ThreadId = _threadId,
            Mine = true
        };
        _messages.Add(message);
        
        await ChatClient.ConnectAsync();
        await ChatClient.PublishMessageAsync(message);
        
        // Clear field
        Message = "";
    }
}