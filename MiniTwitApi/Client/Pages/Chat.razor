@using MiniTwitApi.Shared.Models
@using MiniTwitApi.Shared.Models.UserModels
@using System.Globalization
@using System.Text
@using MiniTwitApi.Client.ViewModels
@using MiniTwitApi.Client.ViewModels.Abstract
@using MiniTwitApi.Shared
@using MiniTwitChatClient
@using MiniTwitChatClient.Abstractions
@using MiniTwitChatClient.Misc
@using MiniTwitChatClient.Models

@inject IChatViewModel ChatViewModel; 
@inject IJSRuntime JSRuntime;
@inject IMiniChatClient ChatClient;

<Error ViewModel="@ChatViewModel"/>

<div class="chat-window">
    <div id="scrollbox">
        @foreach (var message in _messages)
        {
            <div class="@message.CSS">
                <div class="user">@message.Sender</div>
                <div class="msg">@message.Content</div>
            </div>
        }
    </div>
    
</div>
<form @onsubmit="@SendMessage">
    <div class="form-group">
        <input @bind="Message" type="text" class="form-control" id="Message" placeholder="Write your message here"/>
    </div>
    <button class="btn btn-primary">Send Message</button>
</form>


@code
{
    [Parameter] public string SenderUsername { get; set; }
    [Parameter] public string TargetUsername { get; set; }
    
    [Parameter]
    public string Message { get; set; }

    private string _threadId;

    private ICollection<ChatMessage> _messages = new List<ChatMessage>();

    protected override async Task OnInitializedAsync()
    {
        _threadId = "testing";//Convertions.GetThreadId(new List<string>() {SenderUsername, TargetUsername});
        
        await ChatClient.ConnectAsync();
        await ChatClient.SubscribeAsync(new List<string>() { _threadId });
        ChatClient.ReceivedMessage += message =>
        {
            Console.WriteLine($"Got message");
            
            // Check if we sent this message ourselves
            if (message.Sender != SenderUsername)
            {
                message.Mine = false;
                _messages.Add(message);
                StateHasChanged();   
            }
        };
    }

    private async void SendMessage()
        => await SendMessageAsync();
    
    private async Task SendMessageAsync()
    {
        var message = new ChatMessage()
        {
            Sender = SenderUsername,
            Content = Message,
            ThreadId = _threadId,
            Mine = true
        };
        _messages.Add(message);
        
        await ChatClient.ConnectAsync();
        await ChatClient.PublishMessageAsync(message);
        
        // Clear field
        Message = "";
    }
}