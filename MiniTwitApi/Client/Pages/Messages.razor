@using MiniTwitApi.Shared.Models
@using MiniTwitApi.Shared.Models.UserModels
@using System.Globalization
@using System.Text
@using MiniTwitApi.Client.ViewModels.Abstract

@inject IMessageViewModel MessageViewModel; 
@inject IJSRuntime JSRuntime;

<ul class="messages" id="messages">
    
        <button class="btn btn-primary" @onclick="@(() => AddMessages(20))">Load more messages</button>
        @foreach (var message in _messages)
        {
            <li>
                <img width="48" src="http://www.gravatar.com/avatar/@message.HashedAuthorEmail?d=identicon&s=48" alt="UserPicture">
                <strong><a href="/timeline/user_timeline/@message.AuthorUsername">@message.AuthorUsername</a></strong>
                @message.Text;
                <small>&mdash; @MessageViewModel.GenerateDateTime(message.PublishDate).ToString("dd.MM.yyyy - HH.mm", CultureInfo.InvariantCulture) </small>
            </li>
        }
        <button class="btn btn-primary" @onclick="@(() => AddMessages(20))">Load more messages</button>
    }
</ul>

@code 
{
    [Parameter]
    public string Path { get; set; }

    private ICollection<MessageDTO> _messages = new List<MessageDTO>();

    private int Skip { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        Skip = 0;
        await AddMessages(20);
    }

    private async Task AddMessages(int no)
    {
        await foreach (var m in MessageViewModel.RequestMessages($"{Path}?no={no}&skip={Skip}"))
        {
            _messages.Add(m);
            StateHasChanged();
        }
        Skip++;
    }
}