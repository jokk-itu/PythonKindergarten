@using MiniTwitApi.Shared.Models
@using MiniTwitApi.Shared.Models.UserModels
@using System.Globalization
@using System.Text
@using MiniTwitApi.Client.ViewModels.Abstract

@inject IMessageViewModel MessageViewModel; 
@inject IJSRuntime JSRuntime;

<Error ViewModel="@MessageViewModel"/>

@if (_messages.Count > 0)
{
        @foreach (var message in _messages)
        {
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-sm-auto profilepicture">
                            <img class="img-thumbnail" width="48" src="https://www.gravatar.com/avatar/@message.HashedAuthorEmail?d=identicon&s=48" alt="UserPicture">
                        </div>
                        <div class="col-sm-auto">
                            <h5 class="card-title"><a href="timeline/user_timeline/@message.AuthorUsername">@message.AuthorUsername</a></h5>
                            <h6 class="card-subtitle mb-2 text-muted"> @DateTimeOffset.FromUnixTimeSeconds(message.PublishDate).DateTime.ToString(new CultureInfo("de-De"))</h6>
                        </div>
                    </div>
                <p class="card-text">@message.Text</p>
                @if(message.Flagged == 1)
                {
                    <p class="inappropriateWarning">This tweet might be inappropriate for some users.</p>
                }
                </div>
            </div>
    }
    <button class="btn btn-primary" @onclick="@(() => AddMessages(20))">Load more messages</button>
}
else
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden"></span>
        </div>
    </div>
}

@code
{
    [Parameter]
    public string Path { get; set; }

    private ICollection<MessageDTO> _messages = new List<MessageDTO>();

    private int Skip { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Skip = 0;
        await AddMessages(20);
    }

    private async Task AddMessages(int no)
    {
        await foreach (var m in MessageViewModel.RequestMessages($"{Path}?no={no}&skip={Skip}"))
        {
            _messages.Add(m);
            StateHasChanged();
        }
        Skip += 20;
    }
}