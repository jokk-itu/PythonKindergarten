@page "/timeline/my_timeline"
@using MiniTwitApi.Shared.Models.UserModels
@using MiniTwitApi.Client.ViewModels.Abstract

@inject HttpClient HttpClient;
@inject IJSRuntime JSRuntime;
@inject IMyTimelineViewModel MyTimelineViewModel;

@if (MyTimelineViewModel.LoggedInUser is null)
{
    <h3>You need to be logged in</h3>
}
else
{
    <h3>MyTimeline</h3>
    
    @if (MyTimelineViewModel.Error is not null)
    {
        <div class="alert alert-danger" role="alert">
            <p>@MyTimelineViewModel.Error</p>
        </div>
    }

    <div class=twitbox>
        <h3>What's on your mind @MyTimelineViewModel.LoggedInUser.Username</h3>
        <EditForm Model="MyTimelineViewModel.Message" OnValidSubmit="MyTimelineViewModel.PostMessage">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputText @bind-Value="MyTimelineViewModel.Message.Content" />
            <button type="submit" class="btn btn-primary">Share</button>
        </EditForm>
    </div>
    
    @if (MyTimelineViewModel.IsMessageSent)
    {
        <div class="alert alert-success" role="alert">
            <p>@MyTimelineViewModel.Error</p>
        </div>
    }

    <Messages path="@MyTimelineViewModel.Path" />
}

@code 
{
    protected override async Task OnInitializedAsync()
    {
        if (await IsLoggedIn())
        {
            MyTimelineViewModel.LoggedInUser = await GetUser();
            MyTimelineViewModel.Path = $"msgs/{MyTimelineViewModel.LoggedInUser.Username}";
        }
    }

    private async Task<UserDTO> GetUser()
    {
        var user = await JSRuntime.InvokeAsync<string>("getUser");
        return System.Text.Json.JsonSerializer.Deserialize<UserDTO>(user);
    }

    private async Task<bool> IsLoggedIn()
    {
        return await JSRuntime.InvokeAsync<bool>("isUserLoggedIn");
    }
}