@page "/timeline/my_timeline"
@using MiniTwitApi.Client.ViewModels.Abstract

@inject HttpClient HttpClient;
@inject IJSRuntime JSRuntime;
@inject IMyTimelineViewModel MyTimelineViewModel;

<AuthorizeView Context="authContext">
    <NotAuthorized>
        <div class="alert alert-danger" role="alert">
            You need to be logged in
        </div>
    </NotAuthorized>
    <Authorized>
        <h3>My Timeline</h3>
        <Error ViewModel="@MyTimelineViewModel"/>
        <div class=twitbox>
            <p>What's on your mind @authContext.User.Identity?.Name?</p>
            <EditForm Model="MyTimelineViewModel.Message" OnValidSubmit="MyTimelineViewModel.PostMessageAsync" Context="formContext">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="form-group">
                    <input @bind="MyTimelineViewModel.Message.Content" class="form-control" id="Message" placeholder="Share a message" type="text"/>
                </div>
                <button type="submit" class="btn btn-primary">Share</button>
            </EditForm>
        </div>

        <h3>Your messages</h3>
        @if (MyTimelineViewModel.IsMessageSent)
        {
            JSRuntime.InvokeVoidAsync("redirect", $"timeline/my_timeline");
        }
        
        @if (!string.IsNullOrEmpty(MyTimelineViewModel.Path))
        {
            <Messages path="@MyTimelineViewModel.Path"/>
        }
    </Authorized>
</AuthorizeView>

@code
{
    protected override async Task OnInitializedAsync()
    {
        MyTimelineViewModel.LoggedInUser = await MyTimelineViewModel.GetLoggedInUserAsync();
        MyTimelineViewModel.Path = $"msgs/{MyTimelineViewModel.LoggedInUser.Username}";
    }
}