@page "/timeline/{timelinetype}" 
@page "/timeline/{timelinetype}/{username}"
@using Newtonsoft.Json;
@using MiniTwitApi.Shared.Models;
@using System.Globalization
@using System.Text

@inject HttpClient httpClient

@*
Timelinetype 1 = public timeline
Timelinetype 2 = user_timeline
Timelinetype 3 = My timeline / timeline
*@

@if(@TimelineType.Contains("public"))
{
    <h2>Public Timeline</h2>
}
else if(@TimelineType.Contains("user_timeline"))
{
    <h2>@Username's Timeline</h2>
}
else if(@TimelineType.Contains("mytimeline"))
{
    <h2>My timeline</h2>
}

@if(ErrorRaised){
    <div class="error"><strong>Error:</strong> @ErrorMessage</div>
}

@if(UserIsLoggedIn)
{
    @if(@TimelineType.Contains("user_timeline"))
    {
        <div class=followstatus>
            @if(@CurrentLoggedInUser.Username == @Username)
            {
                <p>This is you!</p>
            }
            else if(false) @*Should check if the user which posted the messaged is followed by the viewing user, must be done via API?*@
            {
                <p>You are currently following this user.</p>
                <a class=unfollow href="{{ url_for('unfollow_user', username=profile_user.username)}}">Unfollow user</a> @*Implement unfollowing user*@
            }
            else
            {
                <p>You are not yet following this user.</p>
                <a class=follow href="{{ url_for('follow_user', username=profile_user.username)}}">Follow user</a> @*Implement following user*@
            }
        </div>
    }else if(@TimelineType.Contains("mytimeline")){
        <div class=twitbox>
            <h3>What's on your mind @CurrentLoggedInUser.Username?</h3>
            <EditForm Model="@PostDTO" OnValidSubmit="@PostMessage">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <InputText @bind-Value="PostDTO.Content" />
                <button type="submit" class="btn btn-primary">Share</button>
            </EditForm>
        </div>
    }
}

  <ul class=messages>
        @if(messageList.Count > 0)
        {
            @foreach (KeyValuePair<MessageDTO, UserDTO> message in messageList)
            {
                <li>
                    <img width="48" src=@message.Value.GenerateProfilePictureLink()>
                    <strong><a href="/timeline/user_timeline/@message.Value.Username">@message.Value.Username</a></strong>
                        @message.Key.Text;
                    <small>&mdash; @GenerateDateTime(message.Key.PublishDate).ToString("dd.MM.yyyy - HH.mm", CultureInfo.InvariantCulture) </small>
                </li>
            }
        }
        else
        {
            <li><em>Loading...</em></li>
        }
  </ul>

@code{
    [Parameter]    
    public string TimelineType {get;set;}
    [Parameter]
    public string Username { get; set;}

    public bool UserIsLoggedIn = true;
    public UserDTO CurrentLoggedInUser = new UserDTO{Id = 1, Username = "test", Email = "test@email.com", Password = "Password1234"};
    private bool ErrorRaised = false;
    private string ErrorMessage;

    private MessageToPost PostDTO = new MessageToPost();


    Dictionary<MessageDTO, UserDTO> messageList = new Dictionary<MessageDTO, UserDTO>();

    protected override async Task OnInitializedAsync(){
        List<MessageDTO> messages = new List<MessageDTO>();
        try{
            var responseJson = await httpClient.GetStringAsync("/msgs");
            messages = JsonConvert.DeserializeObject<List<MessageDTO>>(responseJson);
        }
        catch(Exception e)
        {
            ErrorRaised = true;
            ErrorMessage = e.Message;
        }

        foreach(var m in messages)
        {   
            UserDTO user = new UserDTO();
            var responseJson = await httpClient.GetStringAsync($"/user/{m.Author}");
            user = JsonConvert.DeserializeObject<UserDTO>(responseJson);
            messageList.Add(m, user);
        }

    }

    //Retrieved from https://www.thecodebuzz.com/convert-unix-epoch-time-to-datetime-and-date-to-unix-datecsharp-net/
    public DateTime GenerateDateTime(int date)
    {
        DateTimeOffset dateTimeOffSet = DateTimeOffset.FromUnixTimeMilliseconds(date);
        return dateTimeOffSet.DateTime;
    }

    private async Task PostMessage()
    {
        var json = JsonConvert.SerializeObject(PostDTO);
        var data = new StringContent(json, Encoding.UTF8, "application/json");

        string linkToPostTo = "/msgs/"+CurrentLoggedInUser.Username;
    
        try
        {
            var response = await httpClient.PostAsync(linkToPostTo, data);
            var result = response.Content.ReadAsStringAsync().Result;
            Console.WriteLine(result);
        }
        catch (Exception e)
        {
            ErrorRaised = true;
            ErrorMessage = e.Message;
        }
    }
}