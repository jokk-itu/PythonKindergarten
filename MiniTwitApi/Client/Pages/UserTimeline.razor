@page "/timeline/user_timeline/{username}"
@using MiniTwitApi.Client.ViewModels.Abstract

@inject HttpClient HttpClient;
@inject IJSRuntime JSRuntime;
@inject IUserTimelineViewModel UserTimelineViewModel;
@inject NavigationManager NavManager; 

<Error ViewModel="@UserTimelineViewModel"/>
<div class="usertimelineinforow">
    <div class="row">
        <div class="col-md-auto profilepicture">
            <img class="img-thumbnail" width="48" src="https://www.gravatar.com/avatar/" alt="UserPicture">
        </div>
        <div class="col-md-auto profilename">
            <h3>@Username's Timeline</h3>
        </div>
    </div>
    <div class="row followstatus">
        <div class="col-md-auto">
            <p class="followsCount">This user follows @UserTimelineViewModel.FollowsCount users</p>
        </div>
        <AuthorizeView>
            <Authorized>
                    @if (@context.User.Identity.Name.Equals(Username))
                    {
                        NavManager.NavigateTo("/timeline/my_timeline");
                    }
                    else if (UserTimelineViewModel.IsFollowed && !UserTimelineViewModel.IsUnfollowed)
                    {
                        <div class="col-md-auto">
                            <button class="btn btn-secondary" @onclick="@(() => UserTimelineViewModel.UnfollowUser(@context.User.Identity.Name))">Unfollow User</button>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-auto">
                            <button class="btn btn-secondary" @onclick="@(() => UserTimelineViewModel.FollowUser(@context.User.Identity.Name))">Follow User</button>
                        </div>
                    }
                    @if (UserTimelineViewModel.FollowIsDone || UserTimelineViewModel.UnFollowIsDone)
                    {
                        JSRuntime.InvokeVoidAsync("redirect", $"timeline/user_timeline/{Username}");
                    }
            </Authorized>
        </AuthorizeView>
        </div>
</div>

@if (!string.IsNullOrEmpty(UserTimelineViewModel.Path))
{
    <Messages path="@UserTimelineViewModel.Path"/>
}

@code
{
    [Parameter]
    public string Username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UserTimelineViewModel.Username = Username;
        UserTimelineViewModel.Path = $"msgs/{Username}";
        await UserTimelineViewModel.IsUserFollowed();
        await UserTimelineViewModel.RequestFollowsCount();
    }
}