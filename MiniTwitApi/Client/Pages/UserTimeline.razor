@page "/timeline/user_timeline/{username}"
@using MiniTwitApi.Shared.Models.UserModels
@using System.Text.Json;
@using MiniTwitApi.Client.ViewModels.Abstract

@inject HttpClient HttpClient;
@inject IJSRuntime JSRuntime;
@inject IUserTimelineViewModel UserTimelineViewModel;
@inject NavigationManager NavManager; 

<h2>@Username's Timeline</h2>

<Error ViewModel="@UserTimelineViewModel"/>

@if(UserTimelineViewModel.LoggedInUser is not null)
{
    <div class=followstatus>
        @if (UserTimelineViewModel.LoggedInUser.Username.Equals(Username))
        {
            <p>This is you!</p>
        }
        else if (UserTimelineViewModel.IsFollowed && !UserTimelineViewModel.IsUnfollowed)
        {
            <p>You are currently following this user.</p>
            <button class="btn btn-primary" @onclick="@(() => UserTimelineViewModel.UnfollowUser())">Unfollow User</button>
        }
        else if(!UserTimelineViewModel.IsFollowed && UserTimelineViewModel.IsUnfollowed)
        {
            <p>You are not yet following this user.</p>
            <button class="btn btn-primary" @onclick="@(() => UserTimelineViewModel.FollowUser())">Follow User</button>
        }
        else
        {
            <p>Something went wrong using stupid booleans</p>
        }
    </div>
    
    @if (UserTimelineViewModel.FollowIsDone)
    {
        JSRuntime.InvokeVoidAsync("successMessage", $"{Username} is now followed");
        UserTimelineViewModel.IsFollowed = true;
        UserTimelineViewModel.IsUnfollowed = false;
    }
    @if (UserTimelineViewModel.UnFollowIsDone)
    {
        JSRuntime.InvokeVoidAsync("successMessage", $"{Username} is now unfollowed");
        UserTimelineViewModel.IsUnfollowed = true;
        UserTimelineViewModel.IsFollowed = false;
    }
}
@if (!string.IsNullOrEmpty(UserTimelineViewModel.Path))
{
    <Messages path="@UserTimelineViewModel.Path" />
}

@code 
{
    [Parameter]
    public string Username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UserTimelineViewModel.Username = Username;
        UserTimelineViewModel.Path = $"msgs/{Username}";
        if (await IsLoggedIn())
        {
            UserTimelineViewModel.LoggedInUser = await GetUser();
            await UserTimelineViewModel.CheckIfUserIsFollowed();
        }
    }
    
    private async Task<UserDTO> GetUser()
    {
        var user = await JSRuntime.InvokeAsync<string>("getUser");
        return JsonSerializer.Deserialize<UserDTO>(user);
    }
    
    private async Task<bool> IsLoggedIn()
    {
        return await JSRuntime.InvokeAsync<bool>("isUserLoggedIn");
    }
}
