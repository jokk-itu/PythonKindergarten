@page "/timeline/user_timeline/{username}"
@using MiniTwitApi.Client.ViewModels.Abstract

@inject HttpClient HttpClient;
@inject IJSRuntime JSRuntime;
@inject IUserTimelineViewModel UserTimelineViewModel;
@inject NavigationManager NavManager; 

<Error ViewModel="@UserTimelineViewModel"/>
<div class="row userinfo">
    <div class="col-xs-auto profilepicture">
        <img class="img-thumbnail userinfoprofilepicture" src="https://www.gravatar.com/avatar/" alt="UserPicture">
    </div>
    <div class="innerUserinfo">
        <div class="col-sm-auto profilename">
            <h3>@Username's Timeline</h3>
        </div>
        <div class="followsCount col-sm-auto">
            <p><span class="customBold">@UserTimelineViewModel.FollowsCount </span> Following</p>
        </div>
    </div>
</div>
<div class="row buttonRow">
    <AuthorizeView>
            <Authorized>
                    @if (@context.User.Identity.Name.Equals(Username))
                    {
                        NavManager.NavigateTo("/timeline/my_timeline");
                    }
                    else if (UserTimelineViewModel.IsFollowed && !UserTimelineViewModel.IsUnfollowed)
                    {
                        <div class="col-sm-auto">
                            <button class="btn btn-secondary followButton" @onclick="@(() => UserTimelineViewModel.UnfollowUserAsync(@context.User.Identity.Name))">Unfollow User</button>
                        </div>
                    }
                    else
                    {
                        <div class="col-sm-auto">
                            <button class="btn btn-secondary followButton" @onclick="@(() => UserTimelineViewModel.FollowUserAsync(@context.User.Identity.Name))">Follow User</button>
                        </div>
                    }
                    @if (UserTimelineViewModel.FollowIsDone || UserTimelineViewModel.UnFollowIsDone)
                    {
                        JSRuntime.InvokeVoidAsync("redirect", $"timeline/user_timeline/{Username}");
                    }
                    <div class="col-sm-auto">
                        <button @onclick="@(() => ShowChat(context.User.Identity.Name, Username))" class="btn btn-secondary messageButton">Message</button>
                    </div>
            </Authorized>
    </AuthorizeView>
</div>


@if (!string.IsNullOrEmpty(UserTimelineViewModel.Path))
{
    <Messages path="@UserTimelineViewModel.Path"/>
}

@code
{
    [Parameter]
    public string Username { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UserTimelineViewModel.Username = Username;
        UserTimelineViewModel.Path = $"msgs/{Username}";
        await UserTimelineViewModel.IsUserFollowedAsync();
        await UserTimelineViewModel.RequestFollowsCountAsync();
    }
    
    void ShowChat(string sender, string target)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(Chat.SenderUsername), sender);
        parameters.Add(nameof(Chat.TargetUsername), target);

        Modal.Show<Chat>($"Chat with {target}", parameters);
    }
}