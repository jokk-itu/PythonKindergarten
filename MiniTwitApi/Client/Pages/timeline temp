<!--if(@RouteData.RouteValues["timeline"] == "user_timeline")
    {
         <div class=followstatus>
      {% if g.user.user_id == profile_user.user_id %}
        This is you!
      {% elif followed %}
        You are currently following this user.
        <a class=unfollow href="{{ url_for('unfollow_user', username=profile_user.username)
          }}">Unfollow user</a>.
      {% else %}
        You are not yet following this user.
        <a class=follow href="{{ url_for('follow_user', username=profile_user.username)
          }}">Follow user</a>.
      {% endif %}
      </div>
     }-->

<!--SQL QUERY-->
        <!--OR make a class which retrieves the data and use it here-->
        <!---https://zetcode.com/csharp/sqlite/-->
        var connection_string = @"URI=../tmp/minitwit.db";
        using (var connection = new SQLiteConnection(connection_string))
        {
            <!--RAW query for retrieval-->
            var statement = "SQL QUERY";
            connection.Open();
            using (var reader =  await new SQLiteCommand(statement, new SQLiteConnection(connection_string)).ExecuteReaderAsync())
            {
                while(reader.Read()) 
                {
                    <!--Use the data from reader object-->
                }
            };
            <!---PREPARED query for retrieval-->
            using (var command = new SQLiteCommand(connection_string))
            {
                command.CommandText = "Prepared SQL query"; <!--Prepared values are written like so: @nameofvalue-->
                command.Parameters.AddWithValue("name of prepared value", "actual value");
                <!---Repeat as many times as there are prepared values-->
                command.Prepare();
                using (var reader_p = await command.ExecuteReaderAsync())
                {
                    while (reader_p.Read())
                    {
                        <!--Use the data from reader_p object-->
                    }
                }
            }
            
            <!---RAW insertion query-->
            using (var command = new SQLiteCommand())
            {
                command.CommandText = "SQL query for insertion";
                command.ExecuteNonQuery(); <!--async?-->
            }

            <!--PREAPRED insertion query-->
            using (var command = new SQLiteCommand())
            {
                command.CommandText = "SQL query for insertion with prepared values";
                command.Parameters.AddWithValue("name of prepared value", "actual value");
                command.Prepare();
                command.ExecuteNonQuery();
            }
            
        };